/*
 * Selling Partner API for Reports
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2021-06-30
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amazon.spapi.api;
import com.amazon.spapi.client.ApiException;
import com.amazon.spapi.config.AmazonAuthorConfig;
import com.amazon.spapi.enums.EndpointsEnum;
import com.amazon.spapi.enums.ReportTypeEnum;
import com.amazon.spapi.model.reports.*;
import lombok.var;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.io.*;
import java.time.LocalDateTime;
import java.util.*;


/**
 * API tests for ReportsApi
 */
@Ignore
public class ReportsApiTest {

    static String refreshtoken="***";
    static EndpointsEnum endpointsEnum = EndpointsEnum.US;
    static List<String> marketplaceIds= Arrays.asList(endpointsEnum.getMarketplaceId());
    static  AmazonAuthorConfig authorConfig=new AmazonAuthorConfig(refreshtoken, endpointsEnum.getRegion(),endpointsEnum.getEndpoint());
    static String reportType = ReportTypeEnum.RFQD_BULK_DOWNLOAD.getValue();


    static ReportsApi api = ReportsApi.amazonAuthorizationApi(authorConfig);

    @Test
    public void createReportTest() throws ApiException {
        CreateReportSpecification body = new CreateReportSpecification();
        body.setReportType(reportType);
        body.setMarketplaceIds(marketplaceIds);

        //下载自定义报告列
        ReportOptions reportOptions = new ReportOptions();
        reportOptions.put("processing_statuses","IN_PROGRESS");

        //GET_LEDGER_SUMMARY_VIEW_DATA
       /* reportOptions.put("aggregateByLocation","COUNTRY");
        reportOptions.put("aggregatedByTimePeriod","DAILY");*/
        //GET_LEDGER_DETAIL_VIEW_DATA

       // body.setReportOptions(reportOptions);
        /*var startTime = org.threeten.bp.OffsetDateTime.of(2023, 8, 01, 0, 0, 0, 0, org.threeten.bp.ZoneOffset.ofHours(0));
        var endTime = startTime.plusMonths(1).plusSeconds(-1);*/
        var startTime =org.threeten.bp.OffsetDateTime.now();
        var endTime =org.threeten.bp.OffsetDateTime.now();
        /*body.setDataStartTime(startTime);
        body.setDataEndTime(endTime);*/
        CreateReportResponse response= api.createReport(body);
        System.out.println("创建报告");
        System.out.println(response);
    }

    @Test
    public void getReportTest() throws ApiException {
//154134019444
        Report response = api.getReport("602828019620");
        System.out.println(response);
        // TODO: test validations
    }


    @Test
    public void getReportDocumentTest() throws ApiException, IOException {
        String reportDocumentId = "amzn1.spdoc.1.4.na.83f3d736-f1e3-4f3e-932d-14a3a8d11c16.T1A5JTHF8PLUHN.70300";
        ReportDocument response = api.getReportDocument(reportDocumentId);
        //报告生成完成后返回的reportDocumentId
        //var response = api.getReportByDocumentId(reportDocumentId);
        System.out.println(response);
        //System.out.println(response);
        // TODO: test validations
    }


    //2获取报告列表
    @Test
    public  void getReportListTest() throws ApiException {
        List<String> reportTypes = new ArrayList<>();
        reportTypes.add(reportType);
        List<String> processingStatuses = new ArrayList<>();
        //processingStatuses.add("IN_PROGRESS");
        Integer pageSize=100;

        var now = org.threeten.bp.OffsetDateTime.now();
        OffsetDateTime createdSince = null;//now.plusDays(-70);
        OffsetDateTime createdUntil = null;//now.plusDays(-70);
        String nextToken = null;

        try {
            var response = api.getReports(reportTypes,processingStatuses,marketplaceIds,pageSize,createdSince,createdUntil,nextToken);
            System.out.println(response);
        } catch (ApiException e) {
            System.out.println(e.getCode());
            e.printStackTrace();
        }catch (Exception e){
            System.out.println(e.getMessage());
            e.printStackTrace();
        }

        // getReportDocument(response.getPayload().get(0).getReportDocumentId());

    }

    @Test
    public void createReportScheduleTest() throws ApiException {

        var body=new CreateReportScheduleSpecification();
        body.setReportType(this.reportType);
        body.setMarketplaceIds(marketplaceIds);
        body.setPeriod(CreateReportScheduleSpecification.PeriodEnum.P14D);
        var response = api.createReportSchedule(body);
        System.out.println(response);
        // TODO: test validations
    }

    @Test
    public void getReportScheduleTest() throws ApiException {
        String reportScheduleId = null;
        ReportSchedule response = api.getReportSchedule(reportScheduleId);

        // TODO: test validations
    }

    /**
     *
     *
     * Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportSchedulesTest() throws ApiException {
        List<String> reportTypes = Arrays.asList(reportType);
        ReportScheduleList response = api.getReportSchedules(reportTypes);
        System.out.println(response);
        // TODO: test validations
    }

    /**
     *
     *
     * Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportsTest() throws ApiException {
        List<String> reportTypes = Arrays.asList(reportType);
        List<String> processingStatuses = null;
        List<String> marketplaceIds = this.marketplaceIds;
        Integer pageSize = null;
        OffsetDateTime createdSince = org.threeten.bp.OffsetDateTime.of(2023, 07, 01, 0, 0, 0, 0, org.threeten.bp.ZoneOffset.ofHours(0));;
        OffsetDateTime createdUntil = null;
        String nextToken = null;
        GetReportsResponse response = api.getReports(reportTypes, processingStatuses, marketplaceIds, pageSize, createdSince, createdUntil, nextToken);
        System.out.println(response);
        // TODO: test validations
    }

    @Test
    public void getReportSchedules() throws ApiException {
        var reports=Arrays.asList("GET_V2_SETTLEMENT_REPORT_DATA_FLAT_FILE_V2");
        var response=api.getReportSchedules(null);
        System.out.println(response);
    }

    @Test
    public void downLoadReportByDocumentIdTest() throws ApiException, IOException {
        //报告生成完成后返回的reportDocumentId
        String reportDocumentId = "amzn1.spdoc.1.4.na.7298bcd0-b10d-4f7d-9680-56955e990be5.T1GM3RBGVYYDJK.84700";
        var reportText = api.getReportByDocumentId(reportDocumentId);
       // System.out.println(reportText);
        if (reportText==null) return;
        //创建不同的文件夹目录
        String filePath = "D:\\AmazonTestFile";
        File file = new File(filePath);
        //判断文件夹是否存在
        if (!file.exists()) {
            //如果文件夹不存在，则创建新的的文件夹
            file.mkdirs();
        }
        String fileName = reportType + "_" + endpointsEnum.getCountryCode() + LocalDateTime.now().getSecond()+ ".txt";
        File fileText = new File(filePath + "\\" + fileName);
        //判断文件是否存在
        if (!fileText.exists()) {
            //如果文件不存在，则创建新的的文件
            fileText.createNewFile();
        }

        try {
            byte bytes[] =reportText.getBytes();
            int length = bytes.length;
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fileText));
            //保存文件
            bos.write(bytes,0, length-1);
            bos.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("抛出异常！！");
        }
    }



}
