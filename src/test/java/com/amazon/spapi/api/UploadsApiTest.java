/*
 * Selling Partner API for Uploads
 * The Selling Partner API for Uploads provides operations that support uploading files.
 *
 * OpenAPI spec version: 2020-11-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amazon.spapi.api;

import cn.hutool.core.codec.Base64Encoder;
import cn.hutool.core.io.FileUtil;
import cn.hutool.core.io.IoUtil;
import cn.hutool.crypto.digest.MD5;
import com.amazon.spapi.client.ApiException;
import com.amazon.spapi.config.AmazonAuthorConfig;
import com.amazon.spapi.enums.EndpointsEnum;
import com.amazon.spapi.model.uploads.CreateUploadDestinationResponse;
import org.apache.commons.codec.binary.Hex;
import org.junit.Test;
import org.junit.Ignore;

import java.io.*;
import java.security.MessageDigest;
import java.util.*;

/**
 * API tests for UploadsApi
 */
@Ignore
public class UploadsApiTest {

    static String refreshtoken="***";
    static EndpointsEnum endpointsEnum = EndpointsEnum.US;
    static List<String> marketplaceIds= Arrays.asList(endpointsEnum.getMarketplaceId());
    static  AmazonAuthorConfig authorConfig=new AmazonAuthorConfig(refreshtoken, endpointsEnum.getRegion(),endpointsEnum.getEndpoint());
    private final static UploadsApi api =  UploadsApi.amazonAuthorizationApi(authorConfig);


    /**
     *
     *
     * Creates an upload destination for a resource that you specify and returns the information required to upload to that destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .1 | 5 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUploadDestinationForResourceTest() throws ApiException, FileNotFoundException {

        /*InputStream inputStream = FileUtil.getInputStream("D:\\Download\\A+01.jpg");//new FileInputStream(new File("D:\\Download\\A+01.jpg"));
        byte[] bytes = IoUtil.readBytes(inputStream);
        String md5 = Base64Encoder.encode(MD5.create().digest(bytes));*/
        File file = new File("D:\\AdsReport\\A1.jpg");
        String contentMD5=getMD5(file);
        List<String> marketplaceIds = Arrays.asList(endpointsEnum.getMarketplaceId());

        String resource ="aplus/2020-11-01/contentDocuments";
        String contentType = "image/jpeg";



        CreateUploadDestinationResponse response = api.createUploadDestinationForResource(marketplaceIds, contentMD5, resource, contentType);
        System.out.println(response);
        // TODO: test validations
    }

    @Test
    public void fileToMD5(){

        File file = new File("D:\\Download\\A+01.jpg");
        String md5=getMD5(file);
        System.out.println(md5);
    }

    public static String getMD5(File file) {
        FileInputStream fileInputStream = null;
        try {
            MessageDigest MD5 = MessageDigest.getInstance("MD5");
            fileInputStream = new FileInputStream(file);
            byte[] buffer = new byte[8192];
            int length;
            while ((length = fileInputStream.read(buffer)) != -1) {
                MD5.update(buffer, 0, length);
            }
            return new String(Hex.encodeHex(MD5.digest()));
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            try {
                if (fileInputStream != null){
                    fileInputStream.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }


}
}
