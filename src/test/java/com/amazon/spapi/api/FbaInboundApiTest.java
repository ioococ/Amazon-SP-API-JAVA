/*
 * Selling Partner API for Fulfillment Inbound
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amazon.spapi.api;

import com.alibaba.fastjson2.JSON;
import com.amazon.spapi.client.ApiException;
import com.amazon.spapi.config.AmazonAuthorConfig;
import com.amazon.spapi.enums.EndpointsEnum;
import com.amazon.spapi.enums.LabelTypeEnum;
import com.amazon.spapi.enums.PageTypeEnum;
import com.amazon.spapi.enums.ReportTypeEnum;
import com.amazon.spapi.model.fulfillmentinbound.*;
import com.amazonaws.util.CollectionUtils;
import com.google.gson.Gson;
import lombok.var;
import org.apache.commons.lang3.StringUtils;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.math.BigDecimal;
import java.util.*;

@Ignore
public class FbaInboundApiTest {
    /**
     * 响应编码：
     * 200：成功
     * 400：请求缺少或无效的参数，无法解析。
     * 401：请求的 Authorization 标头格式不正确或不包含有效令牌。
     * 403：表示禁止访问该资源。可能的原因包括拒绝访问、未授权、过期令牌或无效签名。
     * 404：指定的资源不存在。
     * 429：请求的频率大于允许的频率。
     * 500：发生了阻止服务器完成请求的意外情况。
     * 503：服务器的临时过载或维护。
     */
    static String refreshtoken="***";
    static EndpointsEnum endpointsEnum = EndpointsEnum.US;
    static String marketplaceId =endpointsEnum.getMarketplaceId();
    static AmazonAuthorConfig authorConfig = new AmazonAuthorConfig(refreshtoken,
            endpointsEnum.getRegion(),endpointsEnum.getEndpoint());
    static  FbaInboundApi api =FbaInboundApi.amazonAuthorizationApi(authorConfig);


    /*static String shipmentId = "FBA16HXTJGMW";
    static String sku="LDWL-TM-LZMo-GlyTabS7Pls-2P-FLC-Matte";
    static String asin="B08DKC9K8J";
    static String fnSku="X0032G5KT1";
    static int quantity=100;
    static int quantityCase=2;
    static String shopname="LDWL";*/

    static String shipmentId = "FBA15R4KK0R1";
 /*   static String sku="dd0720-PU";
    static String asin="B09QGHJ7Z1";
    static String fnSku="X0035CUZWT";*/
    static String sku="jjjjjjAm-blu";
    static String asin="ggggg";
    static String fnSku="gggggg";

    // QuantityInCase *quantity= QuantityShipped
    static int quantity=100;
    static int quantityCase=1;
    static String shopname="TEST";
//"areCasesRequired":true 混装这个值是false，原装要是true
    /**
     * 第一步
     * @author: supoman
     * @description: 创建入库FBA货件计划（从商家发货到FBA仓库）
     * @date: 2021/8/4
     * @throws ApiException
     */
    @Test
    public void createInboundShipmentPlanTest() throws ApiException {
        /*
         * 1、创建入库货件参数（必须）
         * Address：发货地址信息（必须）
         * LabelPrepPreference：标签选项，详情见枚举类（必须）
         * ShipToCountryCode：仓库的国家或者地区（可选）
         * ShipToCountrySubdivisionCode：仓库的国家或者地区细分的某个区域编码（可选）
         * InboundShipmentPlanRequestItemList：入库货件计划信息集合
         */
        CreateInboundShipmentPlanRequest body = new CreateInboundShipmentPlanRequest();

        //2、入库货件的发货地址
        Address address = new Address();
        //公司名称（必须）
        address.setName("zhengzhoulangdaowangluokejiyouxiangongsi");
        //街道地址（必须）
        address.addressLine1("xiangshengjie3hao");
        //其他街道地址（可选）
        address.setAddressLine2("SOHO xinganxian 3lou 6ceng605hao");
        //地区或者县（可选）
        address.setDistrictOrCounty("zhengdongxinqu, shixiaqu");
        //城市（必须）
        address.setCity("zhengzhoushi");
        //州或省代码（必须）
        address.setStateOrProvinceCode("Henan");
        //国家或者地区编码（可选）
        address.setCountryCode("CN");

        //邮政编码：亚马逊FBA对应的邮政编码zip（必须）
        address.setPostalCode("85043");
        body.setShipFromAddress(address);

        /*
         * 3、入库标签偏好（必填）
         * SELLER_LABEL：商家标签
         * AMAZON_LABEL_ONLY：亚马逊标签，如果亚马逊没找到对应的标签，不入库
         * AMAZON_LABEL_PREFERRED：亚马逊标签，亚马逊不管有没有没找到对应的标签，都入库
         */
        body.setLabelPrepPreference(LabelPrepPreference.SELLER_LABEL);

        //4、入库的国家或者地区编码（可选）
        //body.setShipToCountryCode("US");

        //5、入库的国家或者地区的某个区域编码（可选） 同时指定 ShipToCountryCode 和 ShipToCountrySubdivisionCode 会返回错误。
        //body.setShipToCountrySubdivisionCode("PHX3");

        /*
         * 6、入库货件计划信息集合（必须）
         * SellerSKU：商品SKU（必须）
         * ASIN：商品ASIN（必须）
         * Condition：商品的状况，详情见枚举类：例如：NEWITEM：新物品、USEDLIKENEW：近似新的等等（必须）
         * Quantity：商品的数量（必须）
         * QuantityInCase：每个箱子的装箱数量：QuantityInCase * 箱子数量 = Quantity（可选）
         * PrepDetailsList：一份准备说明清单以及谁负责该准备工作（可选）
         */
        InboundShipmentPlanRequestItemList itemList = new InboundShipmentPlanRequestItemList();
        InboundShipmentPlanRequestItem item  = new InboundShipmentPlanRequestItem();
        //商品sellerSKU（必须）
        item.sellerSKU(sku);
        //商品ASIN（必须）
        item.setASIN(asin);
        //商品条件（必须）
        item.setCondition(Condition.NEWITEM);
        //商品数量（必须）
        item.setQuantity(quantity);
        //箱数
        item.setQuantityInCase(quantityCase);

        //入库货件前准备的详细说明信息集合（可选）
        /*PrepDetailsList detailsList = new PrepDetailsList();
        PrepDetails prepDetails = new PrepDetails();
        //入库货件前准备详细说明（必须）
        prepDetails.setPrepInstruction(PrepInstruction.BLACKSHRINKWRAPPING);

        //入库货件准备负责方（必须）AMAZON：亚马逊准备、SELLER：商家（卖方）准备
        prepDetails.setPrepOwner(PrepOwner.SELLER);
        detailsList.add(prepDetails);
        item.setPrepDetailsList(detailsList);*/
        itemList.add(item);
        body.setInboundShipmentPlanRequestItems(itemList);


        CreateInboundShipmentPlanResponse response = api.createInboundShipmentPlan(body);

        System.out.println(response);


    }
    /**
     * 第二步
     * @author: supoman
     * @description: 确认创建入库FBA货件信息(与第一步信息保持一致)
     * @date: 2021/8/6
     * @throws ApiException
     */
    @Test
    public void createInboundShipmentTest() throws ApiException {
        //1、入库货件请求（必须）
        InboundShipmentRequest body = new InboundShipmentRequest();

        //1-1、入库货件标题（必须）
        InboundShipmentHeader shipmentHeader = new InboundShipmentHeader();
        //1-1-1、货件名称（必须）
        shipmentHeader.setShipmentName(java.time.LocalDate.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyyMMdd"))+"-"+shopname+"-"+"US"+ (Math.random() * 100) );
        //1-1-2、货件发货地址,注意是商家发货地址（必须）
        Address address = new Address();
        //公司名称（必须）
        address.setName("zhengzhoulangdaowangluokejiyouxiangongsi");
        //街道地址（必须）
        address.addressLine1("xiangshengjie3hao");
        //其他街道地址（可选）
        address.setAddressLine2("SOHO xinganxian 3lou 6ceng605hao");
        //地区或者县（可选）
        address.setDistrictOrCounty("zhengdongxinqu, shixiaqu");
        //城市（必须）
        address.setCity("zhengzhoushi");
        //州或省代码（必须）
        address.setStateOrProvinceCode("Henan");
        //国家或者地区编码（可选）
        address.setCountryCode("CN");

        //邮政编码：亚马逊FBA对应的邮政编码zip（必须）
        address.setPostalCode("85043");
        shipmentHeader.setShipFromAddress(address);

        //1-1-3、亚马逊运营中心ID（必须）
        shipmentHeader.setDestinationFulfillmentCenterId("BHX4");
        //1-1-4、
        // 指示入库货件是否包含装箱。注意：货件必须包含所有箱装箱或所有独立包装箱。
        //可能的值：
        //true - 货件中的所有箱子都必须装箱。
        //false - 货件中的所有箱子都必须单独包装。
        //注意：如果入库货件的 AreCasesRequired = true，则货件中每个项目的 QuantityInCase 值必须大于零。否则服务返回错误。
        shipmentHeader.setAreCasesRequired(false);
        //1-1-5、发货状态：当与 createInboundShipment 操作一起使用时，WORKING 是唯一的有效值。当与 updateInboundShipment 操作一起使用时，可能的值为 WORKING、SHIPPED 或 CANCELLED（必须）
        shipmentHeader.setShipmentStatus(ShipmentStatus.WORKING);
        //1-1-6、入库标签编号（必须）
        shipmentHeader.setLabelPrepPreference(LabelPrepPreference.SELLER_LABEL);
        //1-1-7、箱内物品信息（可选）
        shipmentHeader.setIntendedBoxContentsSource(IntendedBoxContentsSource.FEED);
        body.setInboundShipmentHeader(shipmentHeader);

        //1-2、入库货件项目集合（必须）
        InboundShipmentItemList itemList = new InboundShipmentItemList();
        InboundShipmentItem item2 = new InboundShipmentItem();
        item2.setShipmentId(this.shipmentId);
        item2.setSellerSKU(sku);
        item2.setQuantityShipped(quantity);
        item2.setQuantityInCase(quantityCase);
        item2.setFulfillmentNetworkSKU(fnSku);
        itemList.add(item2);
        body.setInboundShipmentItems(itemList);
        body.setMarketplaceId(marketplaceId);
        InboundShipmentResponse response = api.createInboundShipment(body, this.shipmentId);
        System.out.println(response);
    }


    /**
     * 第三步
     * @author: supoman
     * @description: 选择物流方式。
     * @date: 2021/8/9
     * @throws ApiException
     */
    @Test
    public void putTransportDetailsTest() throws ApiException {

        //2、货件详情请求信息（必须）
        PutTransportDetailsRequest body = new PutTransportDetailsRequest();
        //2-1
        // true – 请求是针对亚马逊合作承运人的。
        //false – 请求是针对非亚马逊合作承运人的。
        body.setIsPartnered(false);
        //2-2、货件类型，SP：小包裹，LTL：非整车/整车（必须）
        body.setShipmentType(ShipmentType.SP);
        //2-3、货件运输详细信息：创建亚马逊合作承运人运输估算所需信息或提醒亚马逊运营中心非亚马逊合作承运人的入库货件到达所需的信息。（必须）
        TransportDetailInput transportDetails = new TransportDetailInput();
        String DataType="NonPartneredSmallParcelData";
        /*
         * 针对不同类型的货件填写相应的信息:
         * PartneredSmallParcelData：亚马逊合作承运人运送小包裹入库货件所需的信息。
         * NonPartneredSmallParcelData：您向亚马逊提供的有关由未与亚马逊合作的承运人运送的小包裹货件的信息。
         * PartneredLtlData：亚马逊返回的有关亚马逊合作承运人的零担/整车 (LTL/FTL) 货件的信息。
         * NonPartneredLtlData：亚马逊返回的关于由未与亚马逊合作的承运人运送的零担/整车 (LTL/FTL) 货件的信息。
         *
         * 承运商名称:
         * https://docs.developer.amazonservices.com/en_US/fba_inbound/FBAInbound_Datatypes.html#NonPartneredSmallParcelDataInput
         *
         */

        //亚马逊合作承运商小包裹（可选）
        if(DataType.equals("PartneredSmallParcelData")){
            //亚马逊合作承运商小包裹入库货件所需的信息（可选）
            PartneredSmallParcelDataInput partneredSmallParcelDataInput = new PartneredSmallParcelDataInput();
            //小包裹的尺寸和重量信息（可选）
            PartneredSmallParcelPackageInputList pspList = new PartneredSmallParcelPackageInputList();
            PartneredSmallParcelPackageInput pspi = new PartneredSmallParcelPackageInput();
            //尺寸信息（长、宽、高、单位）
            Dimensions dimensions = new Dimensions();
            dimensions.setLength(new BigDecimal(10.00));
            dimensions.setWidth(new BigDecimal(10.00));
            dimensions.setHeight(new BigDecimal(10.00));
            //尺寸单位枚举类 INCHES：英寸，CENTIMETERS：厘米
            dimensions.setUnit(UnitOfMeasurement.INCHES);
            pspi.setDimensions(dimensions);
            //重量信息（值、单位）
            Weight weight = new Weight();
            weight.setValue(new BigDecimal(16.00));
            //重量单位枚举类 POUNDS：磅，KILOGRAMS：千克
            weight.setUnit(UnitOfWeight.KILOGRAMS);
            pspi.setWeight(weight);
            pspList.add(pspi);
            partneredSmallParcelDataInput.setPackageList(pspList);
            //承运商名称（可选）
            partneredSmallParcelDataInput.setCarrierName("A8QUNFNX2C209");
            transportDetails.setPartneredSmallParcelData(partneredSmallParcelDataInput);
        }
        //非亚马逊合作承运商小包裹（可选）
        else if(DataType.equals("NonPartneredSmallParcelData")){
            //非亚马逊合作承运商小包裹入库货件所需的信息（可选）
            NonPartneredSmallParcelDataInput nonPartneredSmallParcelDataInput = new NonPartneredSmallParcelDataInput();
            //小包裹跟踪信息列表（必须）
            NonPartneredSmallParcelPackageInputList npspiList = new NonPartneredSmallParcelPackageInputList();
            NonPartneredSmallParcelPackageInput npspi = new NonPartneredSmallParcelPackageInput();
            //包裹的运输编号（单号），由承运人提供。（必须）
            npspi.setTrackingId(null);//1914119852
            npspiList.add(npspi);

            nonPartneredSmallParcelDataInput.setPackageList(npspiList);
            //运营商名称（必须）
            nonPartneredSmallParcelDataInput.setCarrierName("UNITED_PARCEL_SERVICE_INC");

            transportDetails.setNonPartneredSmallParcelData(nonPartneredSmallParcelDataInput);
        }
        //亚马逊合作承运商非整车/整车 (LTL/FTL)（可选）
        else  if(DataType.equals("PartneredLtlData")){
            //亚马逊合作承运商运送非整车/整车 (LTL/FTL) 入库货件所需的信息（可选）
            PartneredLtlDataInput pldi = new PartneredLtlDataInput();
            //卖家发货人员的联系方式（可选）
            Contact contact = new Contact();
            contact.setName("tyy");
            contact.setPhone("");
            contact.setEmail("2850458851@qq.com");
//            contact.setFax("");
            pldi.setContact(contact);
            //箱子数量（可选）
            pldi.setBoxCount(10);
            //货件的等级，枚举类（可选）
            pldi.setSellerFreightClass(SellerFreightClass._55);
            //承认商准备取件时间（可选）
            pldi.setFreightReadyDate("2021-08-10");
            //托盘信息列表（可选）
            PalletList palletList = new PalletList();
            Pallet pallet = new Pallet();
            //托盘尺寸（必须）
            Dimensions palletDimensions = new Dimensions();
            palletDimensions.setLength(new BigDecimal(10.00));
            palletDimensions.setWidth(new BigDecimal(10.00));
            palletDimensions.setHeight(new BigDecimal(10.00));
            palletDimensions.setUnit(UnitOfMeasurement.CENTIMETERS);
            pallet.setDimensions(palletDimensions);
            //托盘重量（可选）
            Weight palletWeight = new Weight();
            palletWeight.setValue(new BigDecimal(1.00));
            palletWeight.setUnit(UnitOfWeight.KILOGRAMS);
            pallet.setWeight(palletWeight);
            //是否需要承运商堆叠托盘
            pallet.setIsStacked(true);
            palletList.add(pallet);
            pldi.setPalletList(palletList);
            //总重量（可选）
            Weight totalWeight = new Weight();
            totalWeight.setValue(new BigDecimal(16.00));
            totalWeight.setUnit(UnitOfWeight.KILOGRAMS);
            pldi.setTotalWeight(totalWeight);
            //货件总的申报价值（可选）
            Amount declaredAmount = new Amount();
            //值（必须）
            declaredAmount.setValue(new BigDecimal(500));
            //货币代码 USD：美元， GBP：英镑（必须）
            declaredAmount.setCurrencyCode(CurrencyCode.USD);
            pldi.setSellerDeclaredValue(declaredAmount);
            transportDetails.setPartneredLtlData(pldi);
        }
        //非亚马逊合作承运商非整车/整车 (LTL/FTL)（可选）
        else if(DataType.equals("NonPartneredLtlData")){
            //非亚马逊合作承运商运送非整车/整车 (LTL/FTL) 入库货件所需的信息（可选）
            NonPartneredLtlDataInput npldi = new NonPartneredLtlDataInput();
            //承运商名称（必须）
            npldi.setCarrierName("");
            //货件编号：承运人货件编码（必须）
            npldi.setProNumber("");
            transportDetails.setNonPartneredLtlData(npldi);
        }

        body.setTransportDetails(transportDetails);

        PutTransportDetailsResponse response = api.putTransportDetails(shipmentId, body);
        System.out.println(response);

    }

    /**
     * @author: supoman
     * @description: 启动由亚马逊合作承运人估算入库货件的运输成本的过程。
     * 在调用estimateTransport 操作之前，您必须调用putTransportDetails 操作以向亚马逊提供入库货件的运输信息。
     * @date: 2021/8/9
     * @throws ApiException
     */
    @Test
    public void estimateTransportTest() throws ApiException {

        EstimateTransportResponse response = api.estimateTransport(shipmentId);
        System.out.println(response);

    }
    /**
     * @author: supoman
     * @description: 让卖家知道亚马逊是否建议将商品发送到给定的市场。
     * 在某些情况下，亚马逊会提供指导，说明为什么不建议将给定的 SellerSKU 或 ASIN 运送到亚马逊的配送网络。卖家仍可自行决定运送不推荐的商品。
     * @date: 2021/8/4
     * @throws ApiException
     */
    @Test
    public void getInboundGuidanceTest() throws ApiException {
        String marketplaceId = this.marketplaceId;
        List<String> sellerSKUList = Arrays.asList("TestSKU-WZ-M-171220F-org-fA","TestSKU-XRJ-2Pcs-171228F-bk-fA","TestSKU-XRJ-2Pcs-171228F-bk-fA02");
        List<String> asINList =  Arrays.asList("B078HZTXT7","B078TFQFXL");
        GetInboundGuidanceResponse response = api.getInboundGuidance(marketplaceId, sellerSKUList, asINList);
        System.out.println(response);
        // TODO: test validations
    }


    /**
     * @author: supoman
     * @description: 返回卖家在确认预购发货之前需要的预购信息，包括日期
     * @date: 2021/8/7
     * @throws ApiException
     */
    @Test
    public void getPreorderInfoTest() throws ApiException {

        GetPreorderInfoResponse response = api.getPreorderInfo(shipmentId, marketplaceId);
        System.out.println(response);
        var payload = response.getPayload();
        if(payload != null){
            //是否确认预发货（可选）
            var isShipmentConfirmedForPreorder = payload.isShipmentConfirmedForPreorder();
            //货件是否包含预发货的项目（可选）
            var isShipmentContainsPreorderableItems = payload.isShipmentContainsPreorderableItems();
            //确认履行（发货）日期：YYYY-MM-DD（可选）
            var confirmedFulfillableDate = payload.getConfirmedFulfillableDate();
            //到货（到达FBA仓库）日期：YYYY-MM-DD（可选）
            var needByDate = payload.getNeedByDate();
        }
    }

    /**
     * 到货（到FBA）日期
     * * @author: supoman
     * @description: 确认预发货
     * 返回确认预购货件所需的信息。在调用getPreorderInfo 操作后调用该操作，获取NeedByDate 值和其他货件的预购信息。
     * @date: 2021/8/6
     * @throws ApiException
     */
    @Test
    public void confirmPreorderTest() throws ApiException {

        //到货（到FBA）日期
        LocalDate needByDate = LocalDate.now().plusDays(30);
        ConfirmPreorderResponse response = api.confirmPreorder(shipmentId, needByDate, marketplaceId);
        System.out.println(response);
        var payload = response.getPayload();
        if(payload != null){
            //确认到货日期 格式YYYY-MM-DD（可选）
            String confirmedNeedDate = payload.getConfirmedNeedByDate();
            //确认履行日期（确认代发日期）
            String confirmedFulfillableDate = payload.getConfirmedFulfillableDate();
        }
    }


    /**
     * @author: supoman
     * @description: 返回有关入库货件的当前运输信息
     * @date: 2021/8/9
     * @throws ApiException
     */
    @Test
    public void getTransportDetailsTest() throws ApiException {

        GetTransportDetailsResponse response = api.getTransportDetails(shipmentId);
        System.out.println(response);
    }

    /**
     * @author: supoman
     * @description: 确认物流运输
     * 确认卖家接受亚马逊合作的运费估算，同意允许亚马逊向其账户收取运费，并要求亚马逊合作承运人运送入库货件。
     * 在调用 confirmTransport 操作之前，您应该调用 getTransportDetails 操作以获取亚马逊合作的运费估算。
     * 重要提示： 确认运输请求后，如果卖家决定不希望亚马逊合作承运人运送入库货件，您可以调用 voidTransport 操作取消运输请求。
     * 请注意，对于小包裹货件，卖家在确认运输请求后 24 小时内可以取消运输请求。对于零担/整车 (LTL/FTL) 货件，卖家在确认运输请求后一小时内将其作废。
     * 宽限期过后，卖家账户将被收取运费。
     * @date: 2021/8/10
     * @throws ApiException
     */
    @Test
    public void confirmTransportTest() throws ApiException {

        ConfirmTransportResponse response = api.confirmTransport(shipmentId);
        System.out.println(response);

    }


    /**
     * @author: supoman
     * @description: 物流货件提货单
     * 返回非整车/整车 (LTL/FTL) 货件的提单。 返回PDF文档数据，用于为亚马逊合作的非整车/整车 (LTL/FTL) 入库货件打印提单。
     * @date: 2021/8/10
     * @throws ApiException
     */
    @Test
    public void getBillOfLadingTest() throws ApiException {

        GetBillOfLadingResponse response = api.getBillOfLading(shipmentId);
        System.out.println(response);
        if(response.getPayload() != null){
            //用于下载包裹提单的 URL。注意：URL 的有效期只有 15 秒（可选）
            String downloadURL = response.getPayload().getDownloadURL();
        }
    }


    /**
     * 第五步
     * * @author: supoman
     * @description: 获取货件标签信息
     * @date: 2021/8/10
     * @throws ApiException
     */
    @Test
    public void getLabelsTest() throws ApiException {

      // shipmentId="FBA16HC46H12";
    //页面类型：用于打印标签的页面类型。提交您的市场不支持的 PageType 值会返回错误。（必须）
        String pageType = PageTypeEnum.PackageLabel_A4_4.getValue();
        //标签类型:（必须）
        String labelType = LabelTypeEnum.BARCODE_2D.getValue();
        //货件的包裹数量：货件中的包裹数量。（可选）
        Integer numberOfPackages =5;

        /*
         * 打印的包裹列表（可选）
         * 必须匹配之前使用亚马逊物流入库货件纸箱信息 Feed 传递的 CartonId 值。如果不是，则操作返回 IncorrectPackageIdentifier 错误代码。
         */
        List<String> packageLabelsToPrint = null;
        //货件中托盘的数量
        Integer numberOfPallets = 5;
        //
        int pageSize=10;
        //
        int pageStartIndex=0;
        GetLabelsResponse response = api.getLabels(shipmentId, pageType, labelType, numberOfPackages, packageLabelsToPrint, numberOfPallets,pageSize,pageStartIndex);
        System.out.println(response);

    }


    /**
     * @author: supoman
     * @description: 获取预发货说明信息（商家发货到FBA仓库）
     * @date: 2021/8/7
     * @throws ApiException
     */
    @Test
    public void getPrepInstructionsTest() throws ApiException {
        String shipToCountryCode = "US";
        List<String> sellerSKUList = Arrays.asList("NVW-shutao-xkua-GL-210719F-Lktree-fA");
        List<String> asINList = null;
        GetPrepInstructionsResponse response = api.getPrepInstructions(shipToCountryCode, sellerSKUList, asINList);
        System.out.println(response);
    }

    /**
     * @author: supoman
     * @description: 获取发货货件状态和地址详细信息
     * @date: 2021/8/10
     * @throws ApiException
     */
    @Test
    public void getShipmentsTest() throws ApiException {
        //查询类型（必须）
        //SHIPMENT	Returns shipments based on the shipment information provided by the ShipmentStatusList or ShipmentIdList parameters.
        //DATE_RANGE	Returns shipments based on the date range information provided by the LastUpdatedAfter and LastUpdatedBefore parameters.
        //NEXT_TOKEN	Returns shipments by using NextToken to continue returning items specified in a previous request.
        String queryType = "DATE_RANGE";
        //市场ID（必须）
        String marketplaceId = this.marketplaceId;
        //货件状态列表（可选）
        List<String> shipmentStatusList =null;//Arrays.asList("SHIPPED","CLOSED");
        //货件ID信息列表（可选）
        List<String> shipmentIdList =null;// Arrays.asList("FBA16YHMXYZG");
        //开始日期：更新日期（可选）
        OffsetDateTime lastUpdatedAfter = OffsetDateTime.now().plusMonths(-3);
        //结束日期：更新日期（可选）
        OffsetDateTime lastUpdatedBefore =  OffsetDateTime.now().plusMonths(-2);
        //nextToken（可选）
        String nextToken = null;
        GetShipmentsResponse response = api.getShipments(queryType, marketplaceId, shipmentStatusList, shipmentIdList, lastUpdatedAfter, lastUpdatedBefore, nextToken);
       // System.out.println(response.getPayload());
        System.out.println(JSON.toJSONString(response.getPayload()));

    }
    /**
     * @author: supoman
     * @description: 获取货件的项目列表
     * @date: 2021/8/11
     * @throws ApiException
     */
    @Test
    public void getShipmentItemsTest() throws ApiException {
        //查询类型（必须）
        String queryType = "DATE_RANGE";
        String marketplaceId = this.marketplaceId;
        //开始日期：更新日期（可选）
        OffsetDateTime lastUpdatedAfter = OffsetDateTime.now().plusMonths(-1);
        //结束日期：更新日期（可选）
        OffsetDateTime lastUpdatedBefore = OffsetDateTime.now();
        String nextToken = null;
        GetShipmentItemsResponse response = api.getShipmentItems(queryType, marketplaceId, lastUpdatedAfter, lastUpdatedBefore, nextToken);
        System.out.println(response);

    }

    /**
     * @author: supoman
     * @description: 根据shipmentId获取货件项目信息
     * @date: 2021/8/10
     * @throws ApiException
     */
    @Test
    public void getShipmentItemsByShipmentIdTest() throws ApiException {

        String shipmentId="FBA56NXD64";
        getShipmentItemsByShipmentId(shipmentId,null);
    }
    public void  getShipmentItemsByShipmentId(String shipmentId,String token) throws ApiException {
        var response = api.getShipmentItemsByShipmentId(shipmentId, this.marketplaceId,token);
        System.out.println(response);
        if (StringUtils.isNotEmpty(response.getPayload().getNextToken())){
            getShipmentItemsByShipmentId(shipmentId,token);
        }

    }





    /**
     * 第六步 更新货件物流状态为已发货
     * @author: supoman
     * @description: 更新入库FBA货件信息
     * @date: 2021/8/5
     * @throws ApiException
     */
    @Test
    public void updateInboundShipmentTest() throws ApiException {
        //1、入库货件请求（必须）
        InboundShipmentRequest body = new InboundShipmentRequest();

        //1-1、入库货件标题（必须）
        InboundShipmentHeader shipmentHeader = new InboundShipmentHeader();
        //1-1-1、货件名称（必须）
        shipmentHeader.setShipmentName("20220219-BEST-US87.50197863539121");
        //1-1-2、货件发货地址：商家的发货地址（必须）
        //1-1-2、货件发货地址,注意是商家发货地址（必须）
        Address address = new Address();
        //公司名称（必须）
        address.setName("zhengzhoulangdaowangluokejiyouxiangongsi");
        //街道地址（必须）
        address.addressLine1("xiangshengjie3hao");
        //其他街道地址（可选）
        address.setAddressLine2("SOHO xinganxian 3lou 6ceng605hao");
        //地区或者县（可选）
        address.setDistrictOrCounty("zhengdongxinqu, shixiaqu");
        //城市（必须）
        address.setCity("zhengzhoushi");
        //州或省代码（必须）
        address.setStateOrProvinceCode("Henan");
        //国家或者地区编码（可选）
        address.setCountryCode("CN");

        //邮政编码：亚马逊FBA对应的邮政编码zip（必须）
        address.setPostalCode("85043");
        shipmentHeader.setShipFromAddress(address);
        //1-1-3、亚马逊运营中心ID（必须）
        shipmentHeader.setDestinationFulfillmentCenterId("FTW1");
        //1-1-4、是否必须装箱（可选）
        shipmentHeader.setAreCasesRequired(false);
        //1-1-5、发货状态：当与 createInboundShipment 操作一起使用时，WORKING 是唯一的有效值。当与 updateInboundShipment 操作一起使用时，可能的值为 WORKING、SHIPPED 或 CANCELLED（必须）
        shipmentHeader.setShipmentStatus(ShipmentStatus.SHIPPED);
        //1-1-6、入库标签编号（必须）
        shipmentHeader.setLabelPrepPreference(LabelPrepPreference.SELLER_LABEL);
        //1-1-7、箱内物品信息（可选）
        shipmentHeader.setIntendedBoxContentsSource(IntendedBoxContentsSource.FEED);
        body.setInboundShipmentHeader(shipmentHeader);

        //1-2、入库货件项目集合（必须）
        InboundShipmentItemList itemList = new InboundShipmentItemList();
        InboundShipmentItem item = new InboundShipmentItem();
        item.setFulfillmentNetworkSKU(fnSku);
        item.setShipmentId(shipmentId);
        item.setSellerSKU(sku);
        item.setQuantityShipped(quantity);
        item.setQuantityInCase(quantityCase);
        itemList.add(item);
        body.setInboundShipmentItems(itemList);
        //站点id:US对应的站点id：ATVPDKIKX0DER（必须）
        body.setMarketplaceId(endpointsEnum.getMarketplaceId());
        String json = new Gson().toJson(body);

        InboundShipmentResponse response = api.updateInboundShipment(body, shipmentId);
        System.out.println(response);

    }

    /**
     * @author: supoman
     * @description: 取消向FBA发送入库货件的物流请求：
     * 必须在 getTransportDetails 操作返回的 VoidDeadline 日期之前调用此操作，也就是必须在操作截至日期之前调用。
     * 重要提示： VoidDeadline 日期是您确认小包裹货件运输请求后 24 小时或您确认零担/整车 (LTL/FTL) 货件运输请求后一小时。在无效期限过后，您的帐户将被收取运费。
     * @date: 2021/8/9
     * @throws ApiException
     */
    @Test
    public void voidTransportTest() throws ApiException {
        //1、货件id：FBA16BX7J85B（必须）
        String shipmentId = "FBA16BWZ1C14";
        VoidTransportResponse response = api.voidTransport(shipmentId);
        System.out.println(response);
        if(response.getPayload() != null && response.getPayload().getTransportResult() != null){
            TransportResult transportResult = response.getPayload().getTransportResult();
            //返回货件物流状态枚举（必须）
            transportResult.getTransportStatus();
            transportResult.getErrorCode();
            transportResult.getErrorDescription();
        }
    }

}
