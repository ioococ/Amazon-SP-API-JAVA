/*
 * Selling Partner API for Orders
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amazon.spapi.api;

import com.alibaba.fastjson2.JSON;
import com.amazon.spapi.client.ApiClient;
import com.amazon.spapi.client.ApiException;
import com.amazon.spapi.config.AmazonAuthorConfig;
import com.amazon.spapi.enums.EndpointsEnum;
import com.amazon.spapi.model.orders.GetOrderAddressResponse;
import com.amazon.spapi.model.orders.GetOrderBuyerInfoResponse;
import com.amazon.spapi.model.orders.GetOrderItemsBuyerInfoResponse;
import com.amazon.spapi.model.orders.GetOrderItemsResponse;
import com.amazon.spapi.model.orders.GetOrderResponse;
import com.amazon.spapi.model.orders.GetOrdersResponse;
import lombok.var;
import org.junit.Test;
import org.junit.Ignore;
import org.threeten.bp.format.DateTimeFormatter;

import java.util.*;

/**
 * API tests for OrdersV0Api
 */
@Ignore
public class OrdersV0ApiTest {

    static String refreshtoken="***";
    static EndpointsEnum endpointsEnum = EndpointsEnum.US;
    static List<String> marketplaceIds= Arrays.asList(endpointsEnum.getMarketplaceId());
    AmazonAuthorConfig authorConfig=new AmazonAuthorConfig(refreshtoken, endpointsEnum.getRegion(),endpointsEnum.getEndpoint());

    private final OrdersV0Api api =  OrdersV0Api.amazonAuthorizationApi(authorConfig);


    @Test
    public void getOrdersTest() throws ApiException {

        //根据销售日期(purchaseDate)获取数据
        String createdAfter =null;//"2023-01-17T23:00:00";
        String createdBefore = null;//"2023-01-18T00:00:00";

        String lastUpdatedAfter = "2022-01-01T00:00:00";
        String lastUpdatedBefore = "2023-04-01T00:00:00";
        List<String> orderStatuses = new ArrayList<>();
        orderStatuses.add("Shipped");
        List<String> fulfillmentChannels = new ArrayList<>();
        //fulfillmentChannels.add("MFN");

        List<String> paymentMethods = null;
        String buyerEmail = null;
        String sellerOrderId = null;
        Integer maxResultsPerPage = 10;
        List<String> easyShipShipmentStatuses = null;
        String nextToken = null;
        List<String> amazonOrderIds =null;// Arrays.asList("701-7237585-6983434");
        var response=  api.getOrders(Arrays.asList(endpointsEnum.getMarketplaceId()),createdAfter,createdBefore,lastUpdatedAfter,lastUpdatedBefore,orderStatuses,fulfillmentChannels,paymentMethods,buyerEmail
        ,sellerOrderId,maxResultsPerPage,easyShipShipmentStatuses,null,nextToken,
                amazonOrderIds,null,null,null
        );

        System.out.println(response.getPayload());
       // System.out.println(JSON.toJSONString(response.getPayload()));
        // TODO: test validations
    }

    @Test
    public void getOrderTest() throws ApiException {

        for (int i = 0; i < 2; i++) {
            String orderId = "112-4471109-4213818";
            GetOrderResponse response = api.getOrder(orderId);
            System.out.println(response);
        }
        // TODO: test validations
    }

    @Test
    public void getOrdersTestbyRdt() throws ApiException {
        TokensApi tokensApi =TokensApi.amazonAuthorizationApi(refreshtoken, endpointsEnum.getRegion(),endpointsEnum.getEndpoint());
        String rdtToken= tokensApi.createGetOrdersRestrictedDataToken().getRestrictedDataToken();

        api.getApiClient().addDefaultHeader("rdt-token",rdtToken);
        //根据销售日期(purchaseDate)获取数据
        String createdAfter =null;
        String createdBefore = null;

        String lastUpdatedAfter = "2023-01-01T00:00:00";
        String lastUpdatedBefore = "2023-04-10T00:00:00";
        List<String> orderStatuses = new ArrayList<>();
        orderStatuses.add("Shipped");
        List<String> fulfillmentChannels = new ArrayList<>();
        //fulfillmentChannels.add("MFN");

        List<String> paymentMethods = null;
        String buyerEmail = null;
        String sellerOrderId = null;
        Integer maxResultsPerPage = null;
        List<String> easyShipShipmentStatuses = null;
        String nextToken = null;
        List<String> amazonOrderIds = null;
        var response=  api.getOrders(Arrays.asList(endpointsEnum.getMarketplaceId()),createdAfter,createdBefore,lastUpdatedAfter,lastUpdatedBefore,orderStatuses,fulfillmentChannels,paymentMethods,buyerEmail
                ,sellerOrderId,maxResultsPerPage,easyShipShipmentStatuses,null,null,amazonOrderIds,null,null,null
        );


        //System.out.println(response.getPayload());
        System.out.println(JSON.toJSONString(response.getPayload()));
        // TODO: test validations
    }


    @Test
    public void getOrderTestbyRdt() throws ApiException {
        String orderId = "250-6841752-9271008";
        TokensApi tokensApi =TokensApi.amazonAuthorizationApi(refreshtoken, endpointsEnum.getRegion(),endpointsEnum.getEndpoint());
        String rdtToken= tokensApi.createGetOrderRestrictedDataToken(orderId).getRestrictedDataToken();

        api.getApiClient().addDefaultHeader("rdt-token",rdtToken);
    //lwaAuthorizationSigner
        GetOrderResponse response = api.getOrder(orderId);
        System.out.println(response);
        // TODO: test validations
    }

    @Test
    public void getOrderTotalTest() throws ApiException {
        List<String> orders=Arrays.asList("403-2573445-4759565"

        );
        orders.forEach(orderId->{
            GetOrderBuyerInfoResponse response1 = null;

            try {
                response1 = api.getOrderBuyerInfo(orderId);
                Thread.sleep(200);
            } catch (ApiException | InterruptedException e) {
                e.printStackTrace();
            }

            System.out.println(response1);

        });
        //String orderId = "112-3945314-5568240";
     /*   GetOrderAddressResponse response = api.getOrderAddress(orderId);
        System.out.println(response);*/
        // TODO: test validations
        /*GetOrderBuyerInfoResponse response1 = api.getOrderBuyerInfo(orderId);
        System.out.println(response1);*/

        /*GetOrderItemsBuyerInfoResponse response2 = api.getOrderItemsBuyerInfo(orderId, null);
        System.out.println(response2);*/

      /*  GetOrderResponse response = api.getOrder(orderId);
        System.out.println(response);

        GetOrderItemsResponse response3 = api.getOrderItems(orderId, null);
        System.out.println(response3);*/
    }

    /**
     *
     *
     * Returns the shipping address for the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderAddressTest() throws ApiException {
        String orderId = "112-41933339";
        GetOrderAddressResponse response = api.getOrderAddress(orderId);
        System.out.println(response);
        // TODO: test validations
    }

    /**
     *
     *
     * Returns buyer information for the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderBuyerInfoTest() throws ApiException {
        String orderId = "112-4192254-8366609";
        GetOrderBuyerInfoResponse response = api.getOrderBuyerInfo(orderId);
        System.out.println(response);
        // TODO: test validations
    }

    /**
     *
     *
     * Returns detailed order item information for the order indicated by the specified order ID. If NextToken is provided, it&#39;s used to retrieve the next page of order items.  Note: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderItemsTest() throws ApiException {
        //for (int i = 0; i < 200; i++) {
        //try{
            String orderId = "112-6733331";
            String nextToken = null;
            GetOrderItemsResponse response = api.getOrderItems(orderId, nextToken);
            System.out.println(response.getPayload());
            //System.out.println(JSON.toJSONString(response));
       /* }
        catch (Exception e){
            System.out.println(i);
        }*/
       // }


        // TODO: test validations
    }

    /**
     *
     *
     * Returns buyer information in the order items of the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderItemsBuyerInfoTest() throws ApiException {
        String orderId = "112-633331";
        String nextToken = null;
        GetOrderItemsBuyerInfoResponse response = api.getOrderItemsBuyerInfo(orderId, nextToken);
        System.out.println(response);
        // TODO: test validations
    }



}
